package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"crb/models"
)

/*GetCopyinstancesOK Successfully listed copy instances managed by crb-fs

swagger:response getCopyinstancesOK
*/
type GetCopyinstancesOK struct {

	/*copyId is currently used to access CopyInstance.
	  In: Body
	*/
	Payload []*models.CopyInstance `json:"body,omitempty"`
}

// NewGetCopyinstancesOK creates GetCopyinstancesOK with default headers values
func NewGetCopyinstancesOK() *GetCopyinstancesOK {
	return &GetCopyinstancesOK{}
}

// WithPayload adds the payload to the get copyinstances o k response
func (o *GetCopyinstancesOK) WithPayload(payload []*models.CopyInstance) *GetCopyinstancesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get copyinstances o k response
func (o *GetCopyinstancesOK) SetPayload(payload []*models.CopyInstance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCopyinstancesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.CopyInstance, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetCopyinstancesInternalServerError Internal error -- Most likely Metadata-DB could not be accessed

swagger:response getCopyinstancesInternalServerError
*/
type GetCopyinstancesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCopyinstancesInternalServerError creates GetCopyinstancesInternalServerError with default headers values
func NewGetCopyinstancesInternalServerError() *GetCopyinstancesInternalServerError {
	return &GetCopyinstancesInternalServerError{}
}

// WithPayload adds the payload to the get copyinstances internal server error response
func (o *GetCopyinstancesInternalServerError) WithPayload(payload *models.Error) *GetCopyinstancesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get copyinstances internal server error response
func (o *GetCopyinstancesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCopyinstancesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetCopyinstancesDefault Unexpected error

swagger:response getCopyinstancesDefault
*/
type GetCopyinstancesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCopyinstancesDefault creates GetCopyinstancesDefault with default headers values
func NewGetCopyinstancesDefault(code int) *GetCopyinstancesDefault {
	if code <= 0 {
		code = 500
	}

	return &GetCopyinstancesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get copyinstances default response
func (o *GetCopyinstancesDefault) WithStatusCode(code int) *GetCopyinstancesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get copyinstances default response
func (o *GetCopyinstancesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get copyinstances default response
func (o *GetCopyinstancesDefault) WithPayload(payload *models.Error) *GetCopyinstancesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get copyinstances default response
func (o *GetCopyinstancesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCopyinstancesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
