package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCopyMetaDataHandlerFunc turns a function with the right signature into a get copy meta data handler
type GetCopyMetaDataHandlerFunc func(GetCopyMetaDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCopyMetaDataHandlerFunc) Handle(params GetCopyMetaDataParams) middleware.Responder {
	return fn(params)
}

// GetCopyMetaDataHandler interface for that can handle valid get copy meta data params
type GetCopyMetaDataHandler interface {
	Handle(GetCopyMetaDataParams) middleware.Responder
}

// NewGetCopyMetaData creates a new http.Handler for the get copy meta data operation
func NewGetCopyMetaData(ctx *middleware.Context, handler GetCopyMetaDataHandler) *GetCopyMetaData {
	return &GetCopyMetaData{Context: ctx, Handler: handler}
}

/*GetCopyMetaData swagger:route GET /copies/{copyId} crb-web getCopyMetaData

Get copy instance meta data

Return copy instance attributes

*/
type GetCopyMetaData struct {
	Context *middleware.Context
	Handler GetCopyMetaDataHandler
}

func (o *GetCopyMetaData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCopyMetaDataParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
