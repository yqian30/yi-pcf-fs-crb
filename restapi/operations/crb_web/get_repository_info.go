package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRepositoryInfoHandlerFunc turns a function with the right signature into a get repository info handler
type GetRepositoryInfoHandlerFunc func(GetRepositoryInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRepositoryInfoHandlerFunc) Handle(params GetRepositoryInfoParams) middleware.Responder {
	return fn(params)
}

// GetRepositoryInfoHandler interface for that can handle valid get repository info params
type GetRepositoryInfoHandler interface {
	Handle(GetRepositoryInfoParams) middleware.Responder
}

// NewGetRepositoryInfo creates a new http.Handler for the get repository info operation
func NewGetRepositoryInfo(ctx *middleware.Context, handler GetRepositoryInfoHandler) *GetRepositoryInfo {
	return &GetRepositoryInfo{Context: ctx, Handler: handler}
}

/*GetRepositoryInfo swagger:route GET /repositories crb-web getRepositoryInfo

Get info of (just one) repository managed by this CRB

Return a list of provisioned repositories (currently only one)

*/
type GetRepositoryInfo struct {
	Context *middleware.Context
	Handler GetRepositoryInfoHandler
}

func (o *GetRepositoryInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetRepositoryInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
