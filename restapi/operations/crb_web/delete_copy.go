package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteCopyHandlerFunc turns a function with the right signature into a delete copy handler
type DeleteCopyHandlerFunc func(DeleteCopyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCopyHandlerFunc) Handle(params DeleteCopyParams) middleware.Responder {
	return fn(params)
}

// DeleteCopyHandler interface for that can handle valid delete copy params
type DeleteCopyHandler interface {
	Handle(DeleteCopyParams) middleware.Responder
}

// NewDeleteCopy creates a new http.Handler for the delete copy operation
func NewDeleteCopy(ctx *middleware.Context, handler DeleteCopyHandler) *DeleteCopy {
	return &DeleteCopy{Context: ctx, Handler: handler}
}

/*DeleteCopy swagger:route DELETE /copies/{copyId} crb-web deleteCopy

Delete a copy data instance as well as its metadata

Delete copy instance of specified copyId along with its metadata

*/
type DeleteCopy struct {
	Context *middleware.Context
	Handler DeleteCopyHandler
}

func (o *DeleteCopy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteCopyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
